<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Who I am, where I come from, where to go?</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-11T07:13:42.863Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Charles Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云国内镜像</title>
    <link href="http://yoursite.com/2016/11/11/aliyun-maven-mirror/"/>
    <id>http://yoursite.com/2016/11/11/aliyun-maven-mirror/</id>
    <published>2016-11-11T07:12:46.000Z</published>
    <updated>2016-11-11T07:13:42.863Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;
    
    </summary>
    
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>git删除所有分支，除master外</title>
    <link href="http://yoursite.com/2016/10/10/git-delete-all-branches-except-master/"/>
    <id>http://yoursite.com/2016/10/10/git-delete-all-branches-except-master/</id>
    <published>2016-10-10T05:56:31.000Z</published>
    <updated>2016-10-10T05:57:44.593Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch | grep -ve &quot;master$&quot; | xargs git branch -D</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>UML关系总结</title>
    <link href="http://yoursite.com/2016/09/30/uml-relationship/"/>
    <id>http://yoursite.com/2016/09/30/uml-relationship/</id>
    <published>2016-09-30T07:49:47.000Z</published>
    <updated>2016-09-30T08:19:02.297Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见关系"><a href="#常见关系" class="headerlink" title="常见关系"></a>常见关系</h3><ul>
<li>Generalization（泛化）</li>
<li>Realization（实现）</li>
<li>Association（关联）</li>
<li>Aggregation（聚合）</li>
<li>Composition（组合）</li>
<li>Dependency（依赖）</li>
</ul>
<h4 id="Generalization"><a href="#Generalization" class="headerlink" title="Generalization"></a>Generalization</h4><p>【泛化关系】：是一种继承关系，他制定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种。</p>
<p>【箭头及指向】：带三角箭头的实线，箭头指向父类。</p>
<p><img src="http://charleszhang.me/images/uml-relationship/Generalization.gif" alt="Generalization.gif"></p>
<h4 id="Realization"><a href="#Realization" class="headerlink" title="Realization"></a>Realization</h4><p>【实现关系】：是一种类与接口的关系，表示类是借口所有特征和行为的实线。</p>
<p>【箭头及指向】：带三角头的虚线，箭头指向接口。</p>
<p><img src="http://charleszhang.me/images/uml-relationship/Realization.gif" alt="Realization.gif"></p>
<h4 id="Association"><a href="#Association" class="headerlink" title="Association"></a>Association</h4><p>【关联关系】：是一种拥有的关系，它是一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子。关联关系可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向关联有一个箭头。</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带普通箭头的实线，指向被拥有者。</p>
<p><img src="http://charleszhang.me/images/uml-relationship/Association.gif" alt="Association.gif"></p>
<p>上图中，老师和学生是双向关联，老师有多名学生，学生也可以有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。</p>
<p><img src="http://charleszhang.me/images/uml-relationship/Association1.gif" alt="Association1.gif"></p>
<h4 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h4><p>【聚合关系】：是整体与部分的关系。如：车与车轮胎是整体与部分的关系。</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带空心棱形的实线，棱形指向整体。</p>
<p><img src="http://charleszhang.me/images/uml-relationship/Aggregation.gif" alt="Aggregation.gif"></p>
<h4 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h4><p>【组合关系】：是整体与部分的关系.,没有公司就不存在部门。组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带实心棱形的实线，棱形指向整体。</p>
<p><img src="http://charleszhang.me/images/uml-relationship/Composition.gif" alt="Composition.gif"></p>
<h4 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h4><p>【依赖关系】：是一种使用的关系,所以要尽量不使用双向的互相依赖。</p>
<p>【代码表现】：局部变量、方法的参数或者对静态方法的调用。</p>
<p>【箭头及指向】：带箭头的虚线，指向被使用者。</p>
<p><img src="http://charleszhang.me/images/uml-relationship/Dependency.gif" alt="Dependency.gif"></p>
<h3 id="各种关系的强弱顺序："><a href="#各种关系的强弱顺序：" class="headerlink" title="各种关系的强弱顺序："></a>各种关系的强弱顺序：</h3><blockquote>
<p>泛化= 实现&gt; 组合&gt; 聚合&gt; 关联&gt; 依赖</p>
</blockquote>
<p>下面这张UML图，比较形象地展示了各种类图关系：</p>
<p><img src="http://charleszhang.me/images/uml-relationship/Relationship.gif" alt="Relationship.gif"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常见关系&quot;&gt;&lt;a href=&quot;#常见关系&quot; class=&quot;headerlink&quot; title=&quot;常见关系&quot;&gt;&lt;/a&gt;常见关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Generalization（泛化）&lt;/li&gt;
&lt;li&gt;Realization（实现）&lt;/li&gt;
&lt;li&gt;Ass
    
    </summary>
    
    
      <category term="uml" scheme="http://yoursite.com/tags/uml/"/>
    
  </entry>
  
  <entry>
    <title>transient学习小结</title>
    <link href="http://yoursite.com/2016/09/07/transient/"/>
    <id>http://yoursite.com/2016/09/07/transient/</id>
    <published>2016-09-07T15:43:37.000Z</published>
    <updated>2016-09-07T15:44:42.541Z</updated>
    
    <content type="html"><![CDATA[<p>今天在看源码时看到的一个关键字 <code>transient</code>，遍查了一下相关知识，纪录下来备忘。</p>
<h3 id="transient-的作用及使用方法"><a href="#transient-的作用及使用方法" class="headerlink" title="transient 的作用及使用方法"></a>transient 的作用及使用方法</h3><p>一个对象实现了 <code>Serializable</code> 接口便可以被序列化，但是一个类里面的有些属性我们想序列化，有些不想序列化，这时候便可以用的 <code>transient</code> 了，只要在实现了 <code>Serializable</code> 接口的类的某些属性前添加 <code>transient</code> 关键字，这些属性便不会被序列化。</p>
<p>code如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransientTest</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		User user = <span class="keyword">new</span> User();</div><div class="line">		user.setUsername(<span class="string">"Charles Zhang"</span>);</div><div class="line">		user.setPasswd(<span class="string">"123456"</span>);</div><div class="line">		   </div><div class="line">		System.out.println(<span class="string">"read before Serializable: "</span>);</div><div class="line">		System.out.println(<span class="string">"username: "</span> + user.getUsername());</div><div class="line">		System.err.println(<span class="string">"password: "</span> + user.getPasswd());</div><div class="line">		   </div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(</div><div class="line">			<span class="keyword">new</span> FileOutputStream(<span class="string">"C:/user.txt"</span>));</div><div class="line">			os.writeObject(user); <span class="comment">// 将User对象写进文件</span></div><div class="line">			os.flush();</div><div class="line">			os.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(</div><div class="line">			<span class="string">"C:/user.txt"</span>));</div><div class="line">			user = (User) is.readObject(); <span class="comment">// 从流中读取User的数据</span></div><div class="line">			is.close();</div><div class="line">			  </div><div class="line">			System.out.println(<span class="string">"read after Serializable: "</span>);</div><div class="line">			System.out.println(<span class="string">"username: "</span> + user.getUsername());</div><div class="line">			System.err.println(<span class="string">"password: "</span> + user.getPasswd());</div><div class="line">			  </div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String password)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> String password;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.password;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>result 为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">read before Serializable: </div><div class="line">username: Charles Zhang</div><div class="line">password: 123456</div><div class="line"></div><div class="line">read after Serializable: </div><div class="line">username: Charles Zhang</div><div class="line">password: null</div></pre></td></tr></table></figure>
<h3 id="transient-使用小结"><a href="#transient-使用小结" class="headerlink" title="transient 使用小结"></a>transient 使用小结</h3><ul>
<li>一旦变量被 <code>transient</code> 修饰，变量将不再是对象持久化的一部分，改变量内容在序列化后无法获得访问。</li>
<li><code>transient</code> 只能修饰全局变量，不能修饰类、方法和局部变量。如果被修饰变量时用户自定义的类型，需要实现 <code>Serializable</code> 接口。</li>
<li>被 <code>transient</code> 关键字修饰的变量不再能被序列化，一个静态变量不管是否被 <code>transient</code> 修饰，均不能被序列化。<strong>反序列化后静态变量 name 的值仍然为 <code>JVM</code> 中对应静态变量的值，这个值是 <code>JVM</code> 中的不适反序列化得出的。</strong></li>
</ul>
<p>证明如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span> 使用transient关键字不序列化某个变量</div><div class="line"> *        注意读取的时候，读取数据的顺序一定要和存放数据的顺序保持一致</div><div class="line"> *        </div><div class="line"> * <span class="doctag">@author</span> Alexia</div><div class="line"> * <span class="doctag">@date</span>  2013-10-15</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransientTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        </div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setName(<span class="string">"charles"</span>);</div><div class="line">        user.setPassword(<span class="string">"123456"</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"read before Serializable: "</span>);</div><div class="line">        System.out.println(<span class="string">"username: "</span> + user.getName());</div><div class="line">        System.err.println(<span class="string">"password: "</span> + user.getPassword());</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(</div><div class="line">                    <span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/zhangyong/user.txt"</span>));</div><div class="line">            os.writeObject(user); <span class="comment">// 将User对象写进文件</span></div><div class="line">            os.flush();</div><div class="line">            os.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 在反序列化之前改变username的值</span></div><div class="line">            User.name= <span class="string">"zhang"</span>;</div><div class="line"></div><div class="line">            ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(</div><div class="line">                    <span class="string">"/Users/zhangyong/user.txt"</span>));</div><div class="line">            user = (User) is.readObject(); <span class="comment">// 从流中读取User的数据</span></div><div class="line">            is.close();</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"\nread after Serializable: "</span>);</div><div class="line">            System.out.println(<span class="string">"username: "</span> + user.getName());</div><div class="line">            System.err.println(<span class="string">"password: "</span> + user.getPassword());</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>result 为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">read before Serializable: </div><div class="line">username: charles</div><div class="line">password: 123456</div><div class="line"></div><div class="line">read after Serializable: </div><div class="line">username: zhang</div><div class="line">password: null</div></pre></td></tr></table></figure>
<p>这说明反序列化后类中 <code>static</code> 型变量 <code>name</code> 的值为当前 <code>JVM</code> 中对应 <code>static</code> 变量的值，为修改后zhang，而不是序列化时的值Charles。</p>
<h3 id="transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？"><a href="#transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？" class="headerlink" title="transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？"></a>transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？</h3><p>例子如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Externalizable;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.ObjectInput;</div><div class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ObjectOutput;</div><div class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalizableTest</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String content = <span class="string">"是的，我将会被序列化，不管我是否被transient关键字修饰"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        out.writeObject(content);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException,</span></div><div class="line">            ClassNotFoundException &#123;</div><div class="line">        content = (String) in.readObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        </div><div class="line">        ExternalizableTest et = <span class="keyword">new</span> ExternalizableTest();</div><div class="line">        ObjectOutput out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(</div><div class="line">                <span class="keyword">new</span> File(<span class="string">"test"</span>)));</div><div class="line">        out.writeObject(et);</div><div class="line"></div><div class="line">        ObjectInput in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(</div><div class="line">                <span class="string">"test"</span>)));</div><div class="line">        et = (ExternalizableTest) in.readObject();</div><div class="line">        System.out.println(et.content);</div><div class="line"></div><div class="line">        out.close();</div><div class="line">        in.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>content变量会被序列化吗？好吧，我把答案都输出来了，是的，运行结果就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">是的，我将会被序列化，不管我是否被transient关键字修饰</div></pre></td></tr></table></figure>
<p>这是为什么呢，不是说类的变量被 <code>transient</code> 关键字修饰以后将不能序列化了吗？</p>
<p>我们知道在 <code>Java</code> 中，对象的序列化可以通过实现两种接口来实现，<strong>若实现的是 <code>Serializable</code> 接口，则所有的序列化将会自动进行，若实现的是 <code>Externalizable</code> 接口，则没有任何东西可以自动序列化，需要在 <code>writeExternal</code> 方法中进行手工指定所要序列化的变量，这与是否被<code>transient</code> 修饰无关。</strong>因此第二个例子输出的是变量 <code>content</code> 初始化的内容，而不是 <code>null</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在看源码时看到的一个关键字 &lt;code&gt;transient&lt;/code&gt;，遍查了一下相关知识，纪录下来备忘。&lt;/p&gt;
&lt;h3 id=&quot;transient-的作用及使用方法&quot;&gt;&lt;a href=&quot;#transient-的作用及使用方法&quot; class=&quot;headerlink&quot;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java 实现斐波那契数列</title>
    <link href="http://yoursite.com/2016/08/30/fibonacci/"/>
    <id>http://yoursite.com/2016/08/30/fibonacci/</id>
    <published>2016-08-30T15:33:04.000Z</published>
    <updated>2016-08-31T14:18:39.272Z</updated>
    
    <content type="html"><![CDATA[<p>今天在看并发的时候看到的一到联系，求fibonacci数列，记录下来备忘</p>
<blockquote>
<p>斐波纳契数列，又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13、21、……在数学上，斐波纳契数列以如下被以递归的方法定义：F0=0，F1=1，Fn=F(n-1)+F(n-2)（n&gt;=2，n∈N*）。</p>
</blockquote>
<p>实现如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		System.out.println(fibonacci(<span class="number">7</span>));</div><div class="line">		System.out.println(fibonacciNormal(<span class="number">7</span>));		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//递归实现</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//递推实现</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibonacciNormal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">int</span> n1 = <span class="number">1</span>, n2 = <span class="number">1</span>, sn = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n-<span class="number">2</span>; i ++)&#123;</div><div class="line">				sn = n1 + n2;</div><div class="line">				n1 = n2;</div><div class="line">				n2 = sn;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> sn;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在看并发的时候看到的一到联系，求fibonacci数列，记录下来备忘&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;斐波纳契数列，又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13、21、……在数学上，斐波纳契数列以如下被以递归的方法定义：F0=0，F1=1，
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>maven学习（持续更新中...）</title>
    <link href="http://yoursite.com/2016/08/28/maven-study/"/>
    <id>http://yoursite.com/2016/08/28/maven-study/</id>
    <published>2016-08-28T14:45:27.000Z</published>
    <updated>2016-08-28T14:53:14.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="maven是一个项目管理工具，其具体功能如下"><a href="#maven是一个项目管理工具，其具体功能如下" class="headerlink" title="maven是一个项目管理工具，其具体功能如下"></a>maven是一个项目管理工具，其具体功能如下</h4><ul>
<li>构建项目（Builds）</li>
<li>依赖管理（Dependencies）</li>
<li>配置管理（SCMs）</li>
<li>发布管理（Releases）</li>
<li>文档编制（Documentation）</li>
<li>生成项目报告（Report）</li>
</ul>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><h4 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h4><p>maven 是通过插件机制来实现核心功能的，而 maven 只负责解析 xml 文档和管理项目生命周期和管理插件，核心功能都是交予了插件来进行实现的。</p>
<h4 id="约定优于配置"><a href="#约定优于配置" class="headerlink" title="约定优于配置"></a>约定优于配置</h4><p>maven 为其每个配置都提供了合理的默认设置。</p>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="pom概述"><a href="#pom概述" class="headerlink" title="pom概述"></a>pom概述</h4><p>maven 是通过 pom.xml 文件来管理和运行项目，POM 是 Project Object Model 的缩写。项目的属性，依赖和构建配置信息都定义在 pom.xml 文件里面。下图为 pom 文件的组成部分。</p>
<p><img src="/images/14717815654791.jpg" alt=""></p>
<p>大致分为四部分：</p>
<ul>
<li>pom 关系</li>
<li>构建设置</li>
<li>项目基本信息</li>
<li>构建环境</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;h4 id=&quot;maven是一个项目管理工具，其具体功能如下&quot;&gt;&lt;a href=&quot;#maven是一个项目管理工具，其具体功能如下&quot; class=&quot;
    
    </summary>
    
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>进制学习</title>
    <link href="http://yoursite.com/2016/08/28/common-radix/"/>
    <id>http://yoursite.com/2016/08/28/common-radix/</id>
    <published>2016-08-28T14:26:09.000Z</published>
    <updated>2016-08-28T14:40:52.860Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul>
<li>数制是用一组固定的符号和统一的规则来表示数值的方法。</li>
<li>计算机底层是用的是数制是二进制。</li>
<li>用 <code>Java</code> 编程使用的是十进制。<code>Java</code> 底层仍使用二进制</li>
<li>计算机常用的数制还有八进制和十六进制</li>
</ul>
<h3 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h3><blockquote>
<p>十进制的基本数字是0～9，逢10进位。10称作“基数”，<code>10^n</code> （10的n次幂）被称作“权”。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">10000=1*10^4</div><div class="line">1000=1*10^3</div><div class="line">100=1*10^2</div><div class="line">10=1*10^1</div><div class="line">1=1*10^0</div></pre></td></tr></table></figure>
<h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><blockquote>
<p>二进制的基本数字数0～1，逢2进位。基数是2，权为 <code>2^n</code>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">10000=1*2^4</div><div class="line">1000=1*2^3</div><div class="line">100=1*2^2</div><div class="line">10=1*2^1</div><div class="line">1=1*2^0</div></pre></td></tr></table></figure>
<h3 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h3><blockquote>
<p>基本数字:0～9，A~F,A表示10，以此类推，逢16进位，基数16，权势 <code>16^n</code>。十六进制是二进制的简写，方便专业人员书写二进制数据。在 <code>Java</code> 代码中十六进制数用0X或0x做前缀。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1000=1*16^3</div><div class="line">100=1*16^2</div><div class="line">10=1*16^1</div><div class="line">1=1*16^0</div></pre></td></tr></table></figure>
<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><h4 id="十六进制-1"><a href="#十六进制-1" class="headerlink" title="十六进制"></a>十六进制</h4><h5 id="转换为十进制"><a href="#转换为十进制" class="headerlink" title="转换为十进制"></a>转换为十进制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(5E)16 = 5*16^1 + 14*16^0</div><div class="line">		=94</div></pre></td></tr></table></figure>
<h5 id="转换为二进制"><a href="#转换为二进制" class="headerlink" title="转换为二进制"></a>转换为二进制</h5><blockquote>
<p>十六进制中的一位代表二进制中的四位，忽略前面的0。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(5E)16 = (1011110)2</div><div class="line">5 = 1*2^2 + 1*2^0 = 0101</div><div class="line">E = 1*2^3 + 1*2^2 + 1*2^1 </div><div class="line">	= 1110</div></pre></td></tr></table></figure>
<h4 id="十进制-1"><a href="#十进制-1" class="headerlink" title="十进制"></a>十进制</h4><h5 id="转为十六进制"><a href="#转为十六进制" class="headerlink" title="转为十六进制"></a>转为十六进制</h5><blockquote>
<p>十进制转为二进制便不断的除以二，保留余数，直到商为0，将所有余数倒序排列。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">138=(8A)16</div><div class="line">138/16=8.......A</div><div class="line">8/16=0........8</div></pre></td></tr></table></figure>
<h5 id="转为二进制"><a href="#转为二进制" class="headerlink" title="转为二进制"></a>转为二进制</h5><blockquote>
<p>十进制转为二进制便不断的除以二，保留余数，直到商为0，将所有余数倒序排列。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">13 = (1101)2</div><div class="line">13/2＝6........1</div><div class="line">6/2=3........0</div><div class="line">3/2=1........1</div><div class="line">1/2=0........1</div></pre></td></tr></table></figure>
<h4 id="二进制-1"><a href="#二进制-1" class="headerlink" title="二进制"></a>二进制</h4><h5 id="转为十进制"><a href="#转为十进制" class="headerlink" title="转为十进制"></a>转为十进制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(100010)2=1*2^5 + 1^2^1 </div><div class="line">			=34</div></pre></td></tr></table></figure>
<h5 id="转为十六进制-1"><a href="#转为十六进制-1" class="headerlink" title="转为十六进制"></a>转为十六进制</h5><blockquote>
<p>可将二进制转为十进制，然后由十进制转为二进制。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(100010)2=(22)16</div></pre></td></tr></table></figure>
<p>思路如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(100010)2=1*2^5 + 1^2^1 </div><div class="line">			=34</div><div class="line">34／16=2......2</div><div class="line">2/16=0......2</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerlink&quot; title=&quot;相关概念&quot;&gt;&lt;/a&gt;相关概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数制是用一组固定的符号和统一的规则来表示数值的方法。&lt;/li&gt;
&lt;li&gt;计算机底层是用的是数制是二进制。&lt;/li
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
</feed>
